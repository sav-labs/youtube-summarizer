import os
import telebot
import re
import sys
import traceback
import logging
from telebot import types
from youtube_processor import YouTubeProcessor
from summarizer import Summarizer
from logger import setup_logger
from dotenv import load_dotenv
import time
import openai

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
logger = setup_logger(logging.DEBUG)  # –ú–µ–Ω—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å INFO –Ω–∞ DEBUG
logger.info("================================================")
logger.info("–ó–∞–ø—É—Å–∫ YouTube Summarizer Bot")
logger.info("================================================")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not BOT_TOKEN:
    logger.critical("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    sys.exit(1)

logger.info("–¢–æ–∫–µ–Ω Telegram –ø–æ–ª—É—á–µ–Ω")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)
logger.info("Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_models = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_languages = {}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_MESSAGE_LENGTH = 4096  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram

try:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YouTube –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...")
    youtube_processor = YouTubeProcessor(logger=logger.getChild("processor"))
    logger.info("YouTube –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä–∞...")
    summarizer = Summarizer(logger=logger.getChild("summarizer"))
    logger.info("–°—É–º–º–∞—Ä–∏–∑–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
except Exception as e:
    logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}", exc_info=True)
    sys.exit(1)

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ YouTube —Å—Å—ã–ª–æ–∫
YOUTUBE_REGEX = r'(https?://)?(www\.)?(youtube\.com/watch\?v=|youtu\.be/|youtube\.com/shorts/)([a-zA-Z0-9_-]+)(\S*)'

def create_main_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥"""
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    help_button = types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å')
    models_button = types.KeyboardButton('üîÑ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å')
    language_button = types.KeyboardButton('üåê –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫')
    settings_button = types.KeyboardButton('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
    keyboard.add(help_button, models_button, language_button, settings_button)
    return keyboard

def create_models_keyboard(current_model=None):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ –∏ –æ—Ç–º–µ—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å.
    
    Args:
        current_model (str): –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–æ–¥–µ–ª–µ–π
    """
    summarizer = Summarizer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏–∑ summarizer
    available_models = summarizer.list_available_models()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(available_models)} –º–æ–¥–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –º–æ–¥–µ–ª–∏ (—Ç–æ–ª—å–∫–æ –æ–±—â–∏–µ –º–æ–¥–µ–ª–∏, –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö)
    filtered_models = []
    for model in available_models:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–æ–¥–µ–ª–∏ —Å –∞—É–¥–∏–æ, –ø–æ–∏—Å–∫–æ–º –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π
        if any(skip in model for skip in ["audio", "search", "transcribe", "tts", "realtime", "instruct"]):
            continue
        filtered_models.append(model)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    model_categories = {
        "gpt-4.5": 1,
        "gpt-4o": 2,
        "gpt-4o-mini": 3,
        "gpt-4": 4,
        "gpt-4-turbo": 5,
        "gpt-3.5-turbo-16k": 6,
        "gpt-3.5-turbo": 7
    }
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
    sorted_models = sorted(filtered_models, key=lambda x: (
        next((i for prefix, i in model_categories.items() if x.startswith(prefix)), 99),
        x
    ))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    added_models = set()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    
    for model in sorted_models:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ç–∞–∫—É—é –º–æ–¥–µ–ª—å (–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã)
        if model in added_models:
            continue
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
        added_models.add(model)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–Ω–æ–π
        is_current = (model == current_model)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—ã–π ID –º–æ–¥–µ–ª–∏ –∫–∞–∫ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        button_text = f"{model} ‚úì" if is_current else model
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π ID –º–æ–¥–µ–ª–∏ –¥–ª—è callback-–¥–∞–Ω–Ω—ã—Ö
        keyboard.append([types.InlineKeyboardButton(button_text, callback_data=f"set_model_{model}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(keyboard)-1} –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏")
    return types.InlineKeyboardMarkup(keyboard)

def create_language_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤"""
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    ru_button = types.InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang:ru")
    en_button = types.InlineKeyboardButton(text="üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π", callback_data="lang:en")
    de_button = types.InlineKeyboardButton(text="üá©üá™ –ù–µ–º–µ—Ü–∫–∏–π", callback_data="lang:de")
    fr_button = types.InlineKeyboardButton(text="üá´üá∑ –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π", callback_data="lang:fr")
    es_button = types.InlineKeyboardButton(text="üá™üá∏ –ò—Å–ø–∞–Ω—Å–∫–∏–π", callback_data="lang:es")
    it_button = types.InlineKeyboardButton(text="üáÆüáπ –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π", callback_data="lang:it")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    ru_en_button = types.InlineKeyboardButton(
        text="üá∑üá∫üá¨üáß –†—É—Å—Å–∫–∏–π+–ê–Ω–≥–ª–∏–π—Å–∫–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)", 
        callback_data="lang:ru,en"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard.add(ru_en_button)
    keyboard.add(ru_button, en_button)
    keyboard.add(de_button, fr_button)
    keyboard.add(es_button, it_button)
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    back_button = types.InlineKeyboardButton(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_main")
    keyboard.add(back_button)
    
    return keyboard

def create_settings_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    reset_button = types.InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings:reset")
    about_button = types.InlineKeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="settings:about")
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    back_button = types.InlineKeyboardButton(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_main")
    
    keyboard.add(reset_button, about_button, back_button)
    return keyboard

@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    chat_id = message.chat.id
    username = message.from_user.username or message.from_user.first_name or str(chat_id)
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {chat_id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    user_models[chat_id] = summarizer.model
    user_languages[chat_id] = ['ru', 'en']
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    bot.send_message(
        chat_id, 
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ YouTube –≤–∏–¥–µ–æ.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ, –∏ —è —Å–æ–∑–¥–∞–º –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è.\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Å—Å—ã–ª–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞:\n"
        "- https://youtube.com/watch?v=...\n"
        "- https://youtu.be/...\n"
        "- https://youtube.com/shorts/...\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:",
        reply_markup=create_main_keyboard()
    )

@bot.message_handler(func=lambda message: message.text == '‚ùì –ü–æ–º–æ—â—å')
@bot.message_handler(commands=['help'])
def send_help(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help –∏ –∫–Ω–æ–ø–∫–∏ –ü–æ–º–æ—â—å"""
    chat_id = message.chat.id
    username = message.from_user.username or message.from_user.first_name or str(chat_id)
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {chat_id}) –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = create_main_keyboard()
    
    bot.send_message(
        chat_id, 
        "üîç *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞:*\n\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ\n"
        "2. –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ —è –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç –≤–∏–¥–µ–æ\n"
        "3. –ü–æ–ª—É—á–∏—Ç–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ–±–∑–æ—Ä —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –≤–∏–¥–µ–æ\n\n"
        "‚ö†Ô∏è *–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*\n"
        "- –ö–∞—á–µ—Å—Ç–≤–æ –æ–±–∑–æ—Ä–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏\n"
        "- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ —è–∑—ã–∫–∏ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)\n\n"
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏:*\n"
        "- –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–∫–Ω–æ–ø–∫–∞ '–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å')\n"
        "- –í—ã–±–æ—Ä –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞ (–∫–Ω–æ–ø–∫–∞ '–í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫')\n",
        parse_mode="Markdown",
        reply_markup=keyboard
    )

@bot.message_handler(func=lambda message: message.text == 'üîÑ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å')
def select_model(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    chat_id = message.chat.id
    username = message.from_user.username or message.from_user.first_name or str(chat_id)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {chat_id}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_model = user_models.get(chat_id, summarizer.model)
    logger.info(f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {current_model}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–æ–¥–µ–ª—è—Ö –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    bot.send_message(
        chat_id,
        "ü§ñ *–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–∑–æ—Ä–∞:*\n\n"
        "üìö *GPT-4* - –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –Ω–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ\n"
        "üöÄ *GPT-4o* - —Ö–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º GPT-4\n"
        "‚ö° *GPT-3.5* - –±—ã—Å—Ç—Ä—ã–π, –Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∏–∂–µ\n"
        "üìù *GPT-3.5-16k* - –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ\n\n"
        f"–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {current_model}",
        parse_mode="Markdown", 
        reply_markup=create_models_keyboard(current_model)
    )

@bot.message_handler(func=lambda message: message.text == 'üåê –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫')
def select_language(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    chat_id = message.chat.id
    username = message.from_user.username or message.from_user.first_name or str(chat_id)
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {chat_id}) –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_langs = user_languages.get(chat_id, ['ru', 'en'])
    current_langs_str = ", ".join(current_langs)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —è–∑—ã–∫–æ–≤
    language_keyboard = create_language_keyboard()
    
    bot.send_message(
        chat_id, 
        f"üåê *–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —è–∑—ã–∫ —Å—É–±—Ç–∏—Ç—Ä–æ–≤*\n\n"
        f"–¢–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä: `{current_langs_str}`\n\n"
        f"–ë–æ—Ç –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ.\n"
        f"–ï—Å–ª–∏ –æ–Ω–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ª—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —è–∑—ã–∫.\n",
        parse_mode="Markdown",
        reply_markup=language_keyboard
    )

@bot.message_handler(func=lambda message: message.text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
def settings_menu(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    chat_id = message.chat.id
    username = message.from_user.username or message.from_user.first_name or str(chat_id)
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {chat_id}) –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_model = user_models.get(chat_id, summarizer.model)
    current_langs = user_languages.get(chat_id, ['ru', 'en'])
    current_langs_str = ", ".join(current_langs)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
    settings_keyboard = create_settings_keyboard()
    
    bot.send_message(
        chat_id, 
        f"‚öôÔ∏è *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n"
        f"–ú–æ–¥–µ–ª—å: `{current_model}`\n"
        f"–Ø–∑—ã–∫ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: `{current_langs_str}`\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="Markdown",
        reply_markup=settings_keyboard
    )

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback –∫–Ω–æ–ø–æ–∫"""
    chat_id = call.message.chat.id
    username = call.from_user.username or call.from_user.first_name or str(chat_id)
    
    if call.data.startswith('set_model_'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç callback
        model_name = call.data.replace('set_model_', '')
        user_models[chat_id] = model_name
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {chat_id}) –≤—ã–±—Ä–∞–ª –º–æ–¥–µ–ª—å: {model_name}")
        
        bot.edit_message_text(
            f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: `{model_name}`\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—Å–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç—Ç–æ–π –º–æ–¥–µ–ª–∏.",
            chat_id=chat_id,
            message_id=call.message.message_id,
            parse_mode="Markdown"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        bot.send_message(
            chat_id, 
            "–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏.",
            reply_markup=create_main_keyboard()
        )
        
    elif call.data.startswith('lang:'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        langs = call.data.split(':')[1].split(',')
        user_languages[chat_id] = langs
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {chat_id}) –≤—ã–±—Ä–∞–ª —è–∑—ã–∫–∏: {langs}")
        
        bot.edit_message_text(
            f"‚úÖ –í—ã–±—Ä–∞–Ω—ã —è–∑—ã–∫–∏: `{', '.join(langs)}`\n\n"
            f"–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã –Ω–∞ —ç—Ç–∏—Ö —è–∑—ã–∫–∞—Ö –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å.",
            chat_id=chat_id,
            message_id=call.message.message_id,
            parse_mode="Markdown"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        bot.send_message(
            chat_id, 
            "–Ø–∑—ã–∫ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏.",
            reply_markup=create_main_keyboard()
        )
        
    elif call.data == 'back_to_main':
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        bot.delete_message(chat_id=chat_id, message_id=call.message.message_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        bot.send_message(
            chat_id, 
            "–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –û—Ç–ø—Ä–∞–≤—å—Ç–µ YouTube —Å—Å—ã–ª–∫—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=create_main_keyboard()
        )
        
    elif call.data.startswith('settings:'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        action = call.data.split(':')[1]
        
        if action == 'reset':
            # –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_models[chat_id] = summarizer.model
            user_languages[chat_id] = ['ru', 'en']
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {chat_id}) —Å–±—Ä–æ—Å–∏–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            
            bot.edit_message_text(
                "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –¥–æ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.",
                chat_id=chat_id,
                message_id=call.message.message_id
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            bot.send_message(
                chat_id, 
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.",
                reply_markup=create_main_keyboard()
            )
            
        elif action == 'about':
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
            bot.edit_message_text(
                "‚ÑπÔ∏è *–û –±–æ—Ç–µ YouTube Summarizer*\n\n"
                "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–∑–æ—Ä—ã YouTube –≤–∏–¥–µ–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI.\n\n"
                "üí° *–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
                "- –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö –∞—É–¥–∏–æ-–∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
                "- –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –ø–æ–º–æ—â—å—é AI\n"
                "- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —è–∑—ã–∫–æ–≤\n"
                "- –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ AI –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\n"
                "üõ† *–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:*\n"
                "- Python\n"
                "- YouTube Transcript API\n"
                "- OpenAI API\n"
                "- Telegram Bot API\n",
                chat_id=chat_id,
                message_id=call.message.message_id,
                parse_mode="Markdown"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
            bot.send_message(
                chat_id, 
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ YouTube —Å—Å—ã–ª–∫—É:",
                reply_markup=create_main_keyboard()
            )
    
    # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" —Å –∫–Ω–æ–ø–∫–∏
    bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda message: True)
def handle_unknown_message(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    chat_id = message.chat.id
    username = message.from_user.username or message.from_user.first_name or str(chat_id)
    
    text = message.text.strip() if message.text else ""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {chat_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {text[:50]}")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ YouTube —Å—Å—ã–ª–∫–∞ –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é
    youtube_match = re.search(YOUTUBE_REGEX, text)
    if youtube_match:
        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ YouTube —Å—Å—ã–ª–∫—É, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë –∫–∞–∫ –≤–∏–¥–µ–æ
        youtube_url = youtube_match.group(0)
        logger.info(f"–ù–∞–π–¥–µ–Ω–∞ YouTube —Å—Å—ã–ª–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: {youtube_url}, –ø–µ—Ä–µ–¥–∞—é –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É")
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–π –∂–µ —Å—Å—ã–ª–∫–æ–π –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–≥–æ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫
        new_message = telebot.types.Message(
            message_id=message.message_id,
            from_user=message.from_user,
            date=message.date,
            chat=message.chat,
            content_type='text',
            options={},
            json_string='{}'
        )
        new_message.text = youtube_url
        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ YouTube —Å—Å—ã–ª–æ–∫ –Ω–∞–ø—Ä—è–º—É—é
        return process_youtube_link(new_message)
    
    # –ï—Å–ª–∏ YouTube —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ–±—ã—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–µ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ YouTube —Å—Å—ã–ª–∫—É, –Ω–æ —Å –æ—à–∏–±–∫–æ–π
    youtube_terms = ["youtube", "youtu.be", "—é—Ç—É–±", "—é—Ç—é–±", "youtube.com"]
    message_has_youtube_term = any(term in text.lower() for term in youtube_terms)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç —Å GPT-3.5
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        context_prompt = ""
        if message_has_youtube_term or (len(text) > 10 and ("http" in text or "www" in text)):
            # –ï—Å–ª–∏ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø–æ–ø—ã—Ç–∫—É –≤–≤–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É
            context_prompt = f"""
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø–æ–ø—ã—Ç–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ YouTube, –Ω–æ —Å—Å—ã–ª–∫–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è: "{text}"
            
            –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π, –º–∞—Ç–µ—Ä–Ω—ã–π, –Ω–æ —é–º–æ—Ä–Ω–æ–π –æ—Ç–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã—Å–º–µ–∏–≤–∞–µ—Ç –Ω–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube.
            –ò—Å–ø–æ–ª—å–∑—É–π –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Ç–∏–ø–∞ "—Ç—ã —á—Ç–æ, –¥–æ–ª–±–æ—ë–±?", "–≤ —à–∞—Ä—ã –¥–æ–ª–±–∏—à—å—Å—è?", "—Ä—É–∫–∏ –∏–∑ –∂–æ–ø—ã —Ä–∞—Å—Ç—É—Ç?" –∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã–µ –≥—Ä—É–±—ã–µ —Ñ—Ä–∞–∑—ã.
            –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), —Å–º–µ—à–Ω—ã–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Ç –∏–ª–∏ —Å–ª–µ–Ω–≥.
            
            –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ YouTube.
            """
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            context_prompt = f"""
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ: "{text}", –Ω–æ –±–æ—Ç –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–µ–π YouTube –≤–∏–¥–µ–æ.
            
            –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π, –º–∞—Ç–µ—Ä–Ω—ã–π, –Ω–æ —é–º–æ—Ä–Ω–æ–π –æ—Ç–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã—Å–º–µ–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
            –ò—Å–ø–æ–ª—å–∑—É–π –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Ç–∏–ø–∞ "—Ç—ã —Å–æ–≤—Å–µ–º –¥—É—Ä–∞–∫?", "—è –∂–µ –±–æ—Ç –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —é—Ç—É–± –≤–∏–¥–µ–æ –¥–æ–ª–±–∞—ë–±", "—Ç—ã –Ω–∞—Ö—Ä–µ–Ω–∞ –º–Ω–µ —ç—Ç–æ –ø–∏—à–µ—à—å?" –∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã–µ –≥—Ä—É–±—ã–µ —Ñ—Ä–∞–∑—ã.
            –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), —Å–º–µ—à–Ω—ã–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Ç –∏–ª–∏ —Å–ª–µ–Ω–≥.
            
            –í –∫–æ–Ω—Ü–µ –Ω–∞–ø–æ–º–Ω–∏, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å YouTube —Å—Å—ã–ª–∫–∞–º–∏.
            """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT-3.5-turbo
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –∏ –º–∞—Ç–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è Telegram –±–æ—Ç–∞. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≥—Ä—É–±—ã–º–∏, —Å–º–µ—à–Ω—ã–º–∏ –∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–∞—Ç–∞. –ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏—è—Ö!"},
                {"role": "user", "content": context_prompt}
            ],
            temperature=0.9,  # –í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
            max_tokens=200
        )
        
        funny_response = response.choices[0].message.content.strip()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = create_main_keyboard()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–º–µ—à–Ω–æ–π –æ—Ç–≤–µ—Ç
        bot.reply_to(
            message, 
            f"{funny_response}",
            reply_markup=keyboard
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}")
        return
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
        keyboard = create_main_keyboard()
        bot.reply_to(
            message, 
            "–ß—ë –∑–∞ —Ö—Ä–µ–Ω—å —Ç—ã –º–Ω–µ –ø—Ä–∏—Å–ª–∞–ª? –î–∞–≤–∞–π –Ω–æ—Ä–º–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ, –∞ –Ω–µ —ç—Ç—É –¥–∏—á—å.",
            reply_markup=keyboard
        )

@bot.message_handler(func=lambda message: re.search(YOUTUBE_REGEX, message.text))
def process_youtube_link(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ YouTube"""
    chat_id = message.chat.id
    username = message.from_user.username or message.from_user.first_name or str(chat_id)
    
    match = re.search(YOUTUBE_REGEX, message.text)
    youtube_url = match.group(0)
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {chat_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª YouTube —Å—Å—ã–ª–∫—É: {youtube_url}")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    model_name = user_models.get(chat_id, summarizer.model)
    languages = user_languages.get(chat_id, ['ru', 'en'])
    
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å {model_name} –∏ —è–∑—ã–∫–∏ {languages} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = bot.send_message(chat_id, "‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∏–¥–µ–æ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ
        logger.info(f"–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
        bot.edit_message_text("‚è≥ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ...", chat_id, processing_msg.message_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        title, transcript = youtube_processor.process_video(youtube_url, languages)
        
        if not title or not transcript:
            error_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ."
            bot.delete_message(chat_id, processing_msg.message_id)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å –≤–∏–¥–µ–æ
            try:
                error_prompt = f"""
                –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Å—ã–ª–∫—É –Ω–∞ YouTube, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ: "{youtube_url}"
                
                –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –∏ –º–∞—Ç–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã—Å–º–µ–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–µ—Ä–∞–±–æ—á–µ–π —Å—Å—ã–ª–∫–∏.
                –ò—Å–ø–æ–ª—å–∑—É–π –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Ç–∏–ø–∞ "—Ç—ã —á–µ –≤ —à–∞—Ä—ã –¥–æ–ª–±–∏—à—å—Å—è –ø—Ä–∏–¥—É—Ä–æ–∫?", "–Ω–µ –º–æ–∂–µ—à—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ?", "—É —Ç–µ–±—è —Ä—É–∫–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç –≤–æ–æ–±—â–µ?" –∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã–µ –≥—Ä—É–±—ã–µ —Ñ—Ä–∞–∑—ã.
                –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), —Å–º–µ—à–Ω—ã–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Ç –∏–ª–∏ —Å–ª–µ–Ω–≥.
                
                –í –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–æ–∂–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—É.
                """
                
                response = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": "–¢—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –∏ –º–∞—Ç–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è Telegram –±–æ—Ç–∞. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≥—Ä—É–±—ã–º–∏, —Å–º–µ—à–Ω—ã–º–∏ –∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–∞—Ç–∞. –ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏—è—Ö!"},
                        {"role": "user", "content": error_prompt}
                    ],
                    temperature=0.9,
                    max_tokens=200
                )
                
                error_response = response.choices[0].message.content.strip()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –æ—Ç–¥–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –æ–Ω–∞ —Ç–æ—á–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–∞—Å—å
                bot.send_message(chat_id, error_response, reply_markup=create_main_keyboard())
                
            except Exception as error_gen_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ: {str(error_gen_error)}")
                bot.send_message(chat_id, 
                                "–¢—ã —á—ë, –¥–µ–±–∏–ª? –≠—Ç–æ –≤–∏–¥–µ–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç —Å—É–±—Ç–∏—Ç—Ä–æ–≤. –î–∞–≤–∞–π –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ.", 
                                reply_markup=create_main_keyboard())
            return
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –¥–ª—è –≤–∏–¥–µ–æ '{title}', –¥–ª–∏–Ω–∞: {len(transcript)} —Å–∏–º–≤–æ–ª–æ–≤")
        logger.info(f"–ü–û–õ–ù–´–ô –¢–ï–ö–°–¢ –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–ò –í–ò–î–ï–û '{title}':\n{'-' * 50}\n{transcript[:500]}... [–æ–±—Ä–µ–∑–∞–Ω–æ]\n{'-' * 50}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ —Ñ–∞–π–ª –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        transcript_file = f"transcript_{chat_id}_{int(time.time())}.txt"
        try:
            with open(transcript_file, 'w', encoding='utf-8') as f:
                f.write(f"–í–∏–¥–µ–æ: {title}\nURL: {youtube_url}\n\n{transcript}")
            logger.info(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª {transcript_file}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ —Ñ–∞–π–ª: {str(e)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å—É–±—Ç–∏—Ç—Ä–æ–≤
        transcript_length = len(transcript)
        if transcript_length > 5000:
            bot.edit_message_text(f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–Ω—Ç–µ–Ω—Ç –≤–∏–¥–µ–æ... –°–æ–∑–¥–∞—é –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä —Å –º–æ–¥–µ–ª—å—é {model_name}, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...", chat_id, processing_msg.message_id)
        else:
            bot.edit_message_text(f"‚è≥ –°–æ–∑–¥–∞—é –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–∏ {model_name}...", chat_id, processing_msg.message_id)
        
        # –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –º–æ–¥–µ–ª—å—é
        logger.info(f"–ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} —Å –º–æ–¥–µ–ª—å—é {model_name}")
        summary = summarizer.summarize(text=transcript, title=title, model=model_name)
        
        # –£–¥–∞–ª—è–µ–º —É–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ —Ç–µ–∫—Å—Ç–∞
        clean_title = re.sub(r'\s*\([–ß—á]–∞—Å—Ç—å \d+ –∏–∑ \d+\)\s*', '', title)
        clean_summary = re.sub(r'^\s*\*?\s*[–ß—á]–∞—Å—Ç—å \d+ –∏–∑ \d+\s*\*?\s*$', '', summary, flags=re.MULTILINE)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}")
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result_text = f"üé¨ *{clean_title}*\n\n{clean_summary}"
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ä–µ–∑—é–º–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        keyboard = create_main_keyboard()
        if len(result_text) <= MAX_MESSAGE_LENGTH:
            bot.send_message(chat_id, result_text, parse_mode="Markdown", reply_markup=keyboard)
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            bot.send_message(chat_id, f"üé¨ *{clean_title}*", parse_mode="Markdown")
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
            logger.info(f"–û–±–∑–æ—Ä —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞—é –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}")
            
            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            max_chunk_size = MAX_MESSAGE_LENGTH - 50  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            chunks = []
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–±–∏—Ç—å –ø–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞–º
            paragraphs = clean_summary.split("\n\n")
            current_chunk = ""
            
            for paragraph in paragraphs:
                if len(current_chunk) + len(paragraph) + 4 <= max_chunk_size:  # +4 –¥–ª—è "\n\n"
                    if current_chunk:
                        current_chunk += "\n\n" + paragraph
                    else:
                        current_chunk = paragraph
                else:
                    if current_chunk:
                        chunks.append(current_chunk)
                    
                    # –ï—Å–ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å–∞–º –ø–æ —Å–µ–±–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ
                    if len(paragraph) > max_chunk_size:
                        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
                        sentences = re.split(r'(?<=[.!?])\s+', paragraph)
                        sub_chunk = ""
                        
                        for sentence in sentences:
                            if len(sub_chunk) + len(sentence) + 2 <= max_chunk_size:  # +2 –¥–ª—è ". "
                                if sub_chunk:
                                    sub_chunk += " " + sentence
                                else:
                                    sub_chunk = sentence
                            else:
                                if sub_chunk:
                                    chunks.append(sub_chunk)
                                
                                # –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–∞–º–æ –ø–æ —Å–µ–±–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                                if len(sentence) > max_chunk_size:
                                    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å–ª–æ–≤–∞–º/—Å–∏–º–≤–æ–ª–∞–º
                                    for i in range(0, len(sentence), max_chunk_size):
                                        chunks.append(sentence[i:i+max_chunk_size])
                                else:
                                    sub_chunk = sentence
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–¥—á–∞–Ω–∫, –µ—Å–ª–∏ –µ—Å—Ç—å
                        if sub_chunk:
                            chunks.append(sub_chunk)
                    else:
                        current_chunk = paragraph
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫, –µ—Å–ª–∏ –µ—Å—Ç—å
            if current_chunk:
                chunks.append(current_chunk)
            
            # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∏—Ç—å —Ç–µ–∫—Å—Ç, –¥–µ–ª–∞–µ–º —ç—Ç–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
            if not chunks:
                chunks = [clean_summary[i:i+max_chunk_size] for i in range(0, len(clean_summary), max_chunk_size)]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
            for i, chunk in enumerate(chunks):
                if i == len(chunks) - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                    bot.send_message(chat_id, chunk, parse_mode="Markdown", reply_markup=keyboard)
                else:
                    bot.send_message(chat_id, chunk, parse_mode="Markdown")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        bot.delete_message(chat_id, processing_msg.message_id)
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {str(e)}"
        bot.edit_message_text(error_message, chat_id, processing_msg.message_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        bot.send_message(chat_id, "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", 
                         reply_markup=create_main_keyboard())
        
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {str(e)}", exc_info=True)

# –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
def get_default_model():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    try:
        default_model = os.getenv("DEFAULT_MODEL", "gpt-3.5-turbo")
        return default_model
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {str(e)}")
        return "gpt-3.5-turbo"

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫–∞—é –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π polling...")
    try:
        bot.infinity_polling()
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {str(e)}", exc_info=True)
        sys.exit(1) 